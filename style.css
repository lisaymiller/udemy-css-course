* {
  box-sizing: border-box;
}
/* using * is a way to normalize your CSS across browsers */

body {
  /* body more useful than wild card "*" */
  font-family: "Courier New", Courier, monospace;
  text-align: center;

  /* multiple background "images"--> background: linear-gradient(), url("") .. */

  /* background: url() left 10% bottom 20%/cover no repeat; */

  margin: 0;
  padding: 0;
  box-sizing: border-box;
  /* border-box makes height and width include padding and border, can never include margin */
}

h1 {
  font-size: 3em;
  text-shadow: black 15px 10px 10px;
  /* first number: direction, (-) left (+) right. second number: direction, (-) up (+) down. third number: amount of precise shading, larger number = less accurate shadow */
}

div {
  margin: 5%;
  padding: 1%;
  border: 5px black solid;
}

button {
  background-color: black;
  color: white;
  transition: ease 0.5s;
}

button:hover {
  background-color: white;
  color: black;
}

#modal {
  display: none;
}

#close {
  float: right;
  margin-top: -60px;
}

a {
  text-decoration: none;
  color: black;
}

/* using &: must use before things like :hover when nesting or will not work; connects the parent its nested to instead of just nesting it within like header button */

/* mixin param can be used to do something like change the direction of the flex whereever you use the mixin */

/* @mixin MIXINNAME(OPTIONAL PARAM) {} */

/* can use @extend to inherit properties */

/* can nest media queries inside the element it applies to with sass */

/* partials: _NAME.scss */

/* sass can do simple arithmatic; like padding: $size-default * 2; */

/* look at documentation for built in functions */

/* sass map: ex --> $colors: (main: #VALUE, secondary: #VALUE); use variable like --> map-get($colors, main); */

/* storing a list in a variable: store like normal, use syntax set up in the way you would if you were writing normal css */

/* sass ---> no semicolons or curly braces; scss ---> keeps curly braces and semicolons, easier to understand; two different file extensions! */

/* can nest selectors within each other in sass: header { button {} } instead of header button {}; can nest multiple things, keeps things DRY; will compile as normal for production, just helps during devlopment */

/* sass can help you reuse code, like fragments in sprint boot */

/* sass will automatically do prefixes for you! */

/* sass can only be used in development; can use variables and mixins in sass, and it will compile into regular css for production */

/* naming convention: kebab-case and BEM. name-like-this but use .BLOCK-ELEMENT-MODIFIER (.menu-item-big) */

/* @supports () {} will let you run code if the browser supports that code (like using grid or flexbox), make sure to put fallback code BEFORE support */

/* use prefizes before regular css property for proper parsing */

/* vendor prefixes: (for flex) -webkit-box, -ms-flexbox, -webkit-flex */

/* css variables (~80% supported, call like: var(--VARIABLE_NAME) )--> :root { --VARIABLE_NAME: PROPERTY } */

/* main axis: horizontal for row, vertical for column */

/* align content aligns items along the cross axis */

/* justify content shifts flex items along the main axis, horizontal for rows and vertical for columns */

/* align items shifts flex items along the cross axis, vertical for rows and horizontal for columns */

/* flex-flow shorthand */

/* flex direction: row or column */

/* can use flex wrap to adapt to width of container  */

/* display: flex-inline --> width is not relative, using predefined width of child, height still only as tall as necessary  */

/* display: flex --> items inline inside of a flex container, follows height of highest defined container, width relative when container shrunk */

/* must use display: flex to use flexbox, element will be converted to a flex container, children will be flex items; FLEX CONTAINER can use flex-flow, justify-content, align-content, and align-items; FLEX ITEMS can use order, flex, and align self */

/* can define what state your animation should be in with %'s: 0% {} 50% {} 100{} */

/* use keyframe by using animation: KEYFRAME_NAME time(in s or ms delay duration iteration alternate/reverse/etc filledstate (forward skips last keyframe, ends in "normal" state) */

/* keyframes: @keyframes KEYFRAME_NAME { from {CSS_PROPERTY} to {CSS_PROPERTY} } */

/* use transform for animations/transitions --> transform: property you want to animate (can do all) and time (can do multiple, separated by commas), can add type like ease, ease-in, ease out, etc */

/* use transform to rotate and position elements */

/* font shorthand (must have at least size and family, make sure to double check order): font: style variant weight size family*/

/* line height by default refers to the font size of the element you are referring to  */

/* letter spacing and white space properties space out letters */

/* font variant: small caps for all caps but same height */

/* import google fonts and put them in the css instead of linking the google font in the head of the page */

/* media queries should be at the bottom of your CSS */

/* should start creating your website MOBILE FIRST; use media queries for responsiveness */

/* media quiries > vieport */

/* can margin: auto on container to center items easily, only works with block level elements */

/* (so users can change their font sizes in their browser settings) for font size units:  rem, calculates on the initial size of the font size element, default 16px*/

/* use max-width and min-width for responsiveness */

/* applying sizing to font sizing so that a user can specifiy their personal font size preference and that still be applied on the website -- rem and em */

/* vh - viewport height; vw - viewport width */

/* sticky acts like fixed until you reach the elements parent border? */

/* spans are inline elements, divs are block-level elements */

/* more on combinators: can using something like a.active for <a class="active"></a> */

/* pseudo class defines a style of a special STATE of an element, characterized by a single colon : */

/* pseudo element defines the style of a specific PART of an element characterized by a double colon : : */

/* display: none takes element out of dom completely, visibility: hidden hides elements but maintains its space in the dom */

/* can style all elements with an attribute; ex: <button disabled> Click </button> by using [disabled] syntax*/

/* ID's dont just allow you to style, they also allow you to add # to your url to scroll down to the element with that ID tag; ex: <a href="#section"> scrolls until element with section id is at the bottom of the screen */

/* combining selectors: i.e. #product-overview h1 , meaning any h1 in the #product-overview, doesnt have to be a direct child */

/* Different combinators: adjacent sibling ( h2 + p {}, applies to p directly following h2; have to have same parent ), general sibling ( h2 ~ p {}, all p tags colored doesnt have to be directly under just with the same parent ), child (div > p {}, can only be direct child of the div, will not work if p is nested in something else within the div  ), and descendant ( div p {}, level doesnt matter, all p somewhere/anywhere in the div get colored ) BE WARY OF PERFORMANCE IN PRODUCTION */
